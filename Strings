14)STRINGS==>strings is a sequence collectio of characters and it always ends with null ('\0').

 //strings are actually one dimensional of array characters which is terminated by '\o
(NULL characters).This NULL characters indicates end of the string.

2>the ASCII code of'\o' characters is zero.
3>Syntax=> datatype string.name[size];

4>Decleration of Strings.
  
  i>charaters array
   
   *char str[4]={'s','o','n','u'};
   *char str[]="sonu";
   *char str[5];--->run time input of strings.
   
   
  ii>String Pointer.
  
    char *str="sonu";

1)STRLEN()-->length of strings 
2)STRCPY()-->copy
3)STRCAT()-->merge
4)STRCMP()-->compare
5)STRLWR()-->lower case
6)STRUPR()-->upper case

*STRINGS (input/output)
gets()-->for input
puts()-->for output

21) String are actually one dimensional of any character which is terminated by null character this null character and this little character indicates and of these string.
He asked for null character is 0.
*REPRESENTATION OF STRING DECLERATION.
1)char str[6]={'H','E','L','L','O','\O'};
2)char str[]="HELLO";
3)charstr[20];
4)string pointer==>char *str="hello";




















/*65 to 90 (A TO Z).
95 to 127 (a to z).
strings series then strings with recursion.
Input:
s = Geeks
Output: skeeG*/
#include<stdio.h>
#include<string.h>

int revword(char[],int);//fn declare
int main()
 
{
 char str[20];
 int i=0;
 printf("enter any strings= ");
 scanf("%s",&str);//raghav --> i=6 null value
 puts(str);
 
 while(str[i]!='\0')
 {
 
 if(str[i]=='\0')
 {
   i=i-1;
   revword(str,i);	
 }
 else
  //return revword(str,i+1);
  i++;
 	
 }
 
 return revword(str,i);
}

int  revword(char str[],int i)
{
  if(i>=0)
  {
  
   printf("%c",str[i]);	
   return revword(str,i-1);
  
  
}
}















                                //INCOMPLETE


/*Input: S = "abba"
Output: 1
Explanation: S is a palindrome
Example 2:

Input: S = "abc" 
Output: 0
Explanation: S is not a palindrome*/

#include<stdio.h>
#include<string.h>
int  palindrome(char [],int,int);
int main()

{
	int x,n;
	char str[20];
	int i=0;
 printf("enter the strings=  ");
 scanf("%s",&str[i]);
 
 while(str[i]!='\0')//abc-cba.
 {
 	if(str[i]==str[i+1])
 	{
 		n=i+1;//n=2
	   printf("value of n= %d",n);	
	 }
	 else
     i++;	
 }
 i=i-1;
 printf("after exit loop =%d",i);//i=3.
 palindrome(str,i,n);//i=4->null value

  
}
int palindrome(char str[],int i,int n)
{
	if(i<=n)//3<=2
	{
	printf("%c",str[i]);//a
	return palindrome(str,i-1,n);
    }
}








///*s = hello
Output: h
Explanation: In the given string, the first character which is non-repeating is h, as it appears first and there is no other 'h' in the string.*/
#include<stdio.h>
void fstring(char [],int,int );
int  main()
{
  int char str[20];
  int i;	
  printf("enter the strings= ");
  scanf("%s",str);//hello.
  fstring(str,0,1)	
}
void fstring(char str[],int i,int j)
{
  while(str[i]!=0)
  {
  	if(str[i]!=str[j])
  }	
}








#include<stdio.h>
//all strings fn using recur..
int cmp(char [],char [],int );
int  main()
{
	char str1[20],str2[20];
	printf("enter the first strings= ");
	scanf("%s",&str1);
	printf("enter the second strings= ");
	scanf("%s",&str2);
	cmp(str1,str2,0);
}
  int cmp(char str1[],char str2[],int i)
{
	while(str1[i]!='\0')
	{
	
	if(str1[i]==str2[i])
	{
	 printf("strings are equal");
	 break;	
	}
	return cmp(str1,str2,i+1);
   }
   if(str1[i]=='\0' && str2[i]=='\0')
   {
   	printf("strings are not equal");
   }
}




///*X = "25", Y = "23"
Output:
48*/
#include<stdio.h>
int main()
{
	char str[2],str2[2];
	char x,y,z,i;
	printf("enter the first strings= ");
	scanf("%s",&str);//25
	
	printf("enter the second strings= ");
	scanf("%s",&str2);//23
 
    for(i=0;i<=0;i++)
    {
    	y=str[i]+str2[i];
  	   printf("%c",y);
  	   
    	x=str[i+1]+str2[i+1];
    	//y=str[i]+str2[i];
    	//z=x+y;
  	   printf("%c",x);//"g"
  	   
    
	}
	
	
	
}


//#include<stdio.h>
//check how many vowels or const in given strings.
int main()
{
  char str[30];
  char vowels[10]={'a','e','i','o','u','A','E','I','O','U'};
  printf("enter the strings= ");
  gets(str);//RAGHAV
  if(str[i]==vowels[i])
  {
  	
  }
  
  	
}
