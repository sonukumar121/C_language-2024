1>> //dynamic memory allocation.
malloc()-->malloc is the short name for "memory allocation" and is used dynamically allocate a single 
large block of contiguos memory according to the  size specified.
SYNTAX==>(void*)malloc(n*sizeof(int));
malloc fn simply allocates a memory block according to the size specified  in the heap and on 
success it returns a pointer pointing to the first byte of the aloocated memory else returns 
NULL.
Malloc stands for memory alocation.
malloc allocates a single block of memory of specified size.
malloc contains one arguments and size of datatype.
malloc initilize the value with garbaze value.
***->malloc returns a void pointer to the allocated space, or NULL if there's insufficient memory available.
and here pointer represent space why because pointer have ability to hold the adreesss of the another variable.
but here which have void means nothing but if you type cast then memory will  be accoding to user datatype will be aloocated
it is faster than calloc()



#include<stdio.h>
#include<stdlib.h>
//using dma fn-->malloc()
int main()
{
	int *ptr,i,n;
  printf("enter the number of integers= ");
  scanf("%d",&n);//n=3
  printf("%d",sizeof(int));
  ptr=(int*)malloc(n*sizeof(int));//n=3//perfect example-->pasword creation.
  printf("enter the elements= ");
  if(ptr==NULL)
  {
  	printf("memory not avilable");
  	exit(1);
  }
  for(i=0;i<=n-1;i++)
  {
   scanf("%d",ptr+i);	
  }
   for(i=0;i<=n-1;i++)
   {
   	 printf("%d",*(ptr+i));
   	 
   }
  return 0;	
}





//using calloc();

2>> //     CALLOC()
   SYNTAX==>p=(int*)calloc(n,sizeof(int));
   here,n stand for no.of block or we can  say for no of integers to intiliaze the block.
calloc stands for continous memory alocation.
calloc allocates multiple  block of memory of same size.
calloc contains two arguments and size of datatype.
calloc initilize the value with zero value.
it is slower than malloc()

  
  int main()
{
	int *ptr,i,n;
  printf("enter the number of integers= ");
  scanf("%d",&n);//n=3
  printf("%d",sizeof(int));
  ptr=(int*)calloc(n,sizeof(int));//n=3//perfect example-->pasword creation.
  printf("enter the elements= ");
  if(ptr==NULL)
  {
  	printf("memory not avilable");
  	exit(1);
  }
  for(i=0;i<=n-1;i++)
  {
   scanf("%d",ptr+i);	
  }
   for(i=0;i<=n-1;i++)
   {
   	 printf("%d",*(ptr+i));
   	 
   }
  return 0;	
}



//REalloc()

IMPORTANT POINTS OF REALLOC( )

1. It mean "reallocation of memory"
2. It main purpose is to "resize" the memory after already allocated with malloc or calloc
3. Resize means to "increase or decrease" memory
4. You can only use realloc if you have already allocated memory using malloc or calloc, else it is impossible to use realloc
5. it accept two arguments: (a) previous allocated pointer (b) new memory size
6. realloc returns void*
7. when it increases memory, it will not lose the previous content
8. after using realloc, you should free it.
//Realloc() fn i used to chnage the size of memory block without losing the old data.







#include<stdio.h>
#include<stdlib.h>
int main()
{
  int n,*ptr,i,a[30],p;
  printf("enter the no.of integers= ");
  scanf("%d",&p);//n=3
  
   ptr=(int*)malloc(n*sizeof(int));
  
  for(i=0;i<p;i++)
  {
  	scanf("%d",ptr+i);
  }	
 
 printf("enter the updated size= ");
 scanf("%d",&n);
 
 int *ptr1=(int*)realloc(ptr,n*sizeof(int));
 for(i=p;i<n;i++)
 {
 	scanf("%d",ptr+i);
 }
 
 for(i=0;i<n;i++)
 {
 	printf("%d,",*(ptr+i));
 }

}




