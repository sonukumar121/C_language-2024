#include<stdio.h>
int sum=0,c;
//print natural number using recursion.
/*int natural(int x);//fn declare
void  main()
{
  int n=1;
  natural(n);
}

int natural(int x) //fn define.
{
   if(x<=10)
   {
       printf("%d,",x);
       return natural(x+1);
   }
   
}*/
// find factorial using recursion.
/*int fact(int x);
void main()
{
  int n,y;
  printf("enter the number= ");
  scanf("%d",&n);
  y=fact(n);
 printf("factorial is= %d",y);
  
}

int fact(int x)
{
  if(x==1)
  {
      return 1;
  }
  else
  return x*fact(x-1);
}*/

// print array elements using recursion.
  /* void arrprint(int [],int);//fn declare.only data_type.
   void main()
   {
       int a[5],i,n;
       printf("enter the size of array= ");
       scanf("%d",&n);//n=5
       
       printf("enter the numbers= ");
       for(i=0;i<=4;i++)
       {
           scanf("%d",&a[i]);//1,2,3,4,5.
       }
       arrprint(a,0);//actual argument passing.
   }
   
   void arrprint(int a[],int i)//fn define.//datatype with varaiable
   {
     if(i<=4)
     {
         printf("%d,",a[i]);
         arrprint(a,i+1);
     }
     
   }*/
   
 //sum of array elements using recursion.
 int  arrsum(int [],int,int);//fn declare with only datatype.
 void  main()
 {
     int n,i,a[5],SUM;
     printf("enter the size of array= ");
     scanf("%d",&n);
     printf("enter the elements= ");
     for(i=1;i<=5;i++)
     {
       scanf("%d",&a[i]);  
     }
     arrsum(a,1,n);
     
     
     
 }

int arrsum(int a[],int i,int n)
{
  
  if(i<=n)
  {
    sum=sum+a[i]; 
    return arrsum(a,i+1,n);
  }
  else
  c=sum;
  printf("sum is= %d",c);
  
  
}







 //  RECURSION...
#include<stdio.h>
/*
//recursion in c.
int fact(int x );
void  main()
{
   int n,f;
   printf("enter the number= ");
   scanf("%d",&n);
    f=fact(n); //n=5
    printf("%d",f);
  
}

int fact(int x)

{
   
    if(x==1)
    {
        return 1;
    }
    else
    return x*fact(x-1);
    
}
*/
// print(1 to n)
/*void natural(int x);
void  main()
{
    int n=1;
  
  natural(n);
}


void natural(int x)
{
    if(x<10)
    {
        printf(" %d,",x);
        return natural(x+1);
    }
    
}*/






#include<stdio.h>
// reverse an array using recursion.
int arev(int [],int,int);
void main()
{
 int i,n;
 printf("enter the size of array= ");
 {
     scanf("%d",&n);//n=5
    
 }
  
   int a[n];
 printf("enter the elements= ");
 for(i=1;i<=n;i++)
 {
   scanf("%d",&a[i]); //1,2,3,4,5. 
 }
   arev(a,5,1);//fn calling.
}


int arev(int a[],int i,int n)
{
    if(i>=n) //5>=1
    {
     printf("%d,",a[i]);
    return arev(a,i-1,n);   
    }
  
}




// 11-08-24

// sorting the array using recursion.
#include<stdio.h>
int n;
int  asort(int [],int,int);
void main()
{
  int i,n;
  printf("enter the size of array= ");
  scanf("%d",&n);
  int a[n];
  printf("enter the elements= ");
{
for(i=1;i<=5;i++)
{
  scanf("%d",&a[i]); 
}
}
   asort(a,5,1);

}
  

    
int asort(int a[],int n,int i)
{ 
   int c;
   if(i<5)
   {
   if(a[i]>a[i+1])//1,0,9,2,3.-->0,1,9,2,3.
   {
       c=a[i+1];
       a[i+1]=a[i];
       a[i]=c;
       i++;
      
   }
   else
   return (a,n,i+1);
   }
   printf("value after sorting= ");
   for(i=1;i<=5;i++)
   {
       printf("%d",a[i]);
   }
  
}
//INCOMPLETE



#include<stdio.h>
//Linear search using Recursion.
int lsearch(int [],int,int,int);//fn declare
void main()
{
  int a[5],i,n,size=5;
  printf("enter the elements= ");
  for(i=1;i<=size;i++)
  {
    scanf("%d",&a[i]);  
  }
    printf("enter the searching elements= ");
    scanf("%d",&n);
    lsearch(a,n,5,1);//fn calling actual argument always pass from the main function.
}

int lsearch(int a[],int n,int size,int i)//fn define
{
 while(i<=size)
 {
  
  if(a[i]==n)
  {
      printf("searching elements is found");
      break;
  }
  else
  return lsearch(a,n,size,i+1);
  
}
if(i==6)
{
   printf("elemnts is not in arrays"); 
}
}
// complete






               // incomplete below alll

#include<stdio.h>
void Mmin(int[],int,int,int);
int main()
{
  int i,n,a[5];
  printf("enter the numbers = ");
  for(i=1;i<=5;i++)
  {
   scanf("%d",&a[i]);   
  }
  Mmain(a,a[1],1,a[1]);
  
}

void Mmain(int a[],int max,int i,int min)
{
  while(i<=5) 
 {
  if(max<a[i+1])
  {
     max=a[i+1]; 
  }
  else
  return Mmain(a,max,i+1,min);
 }
 printf("max value is= %d",max);

while(i<=5)
{
if(min<a[i+1])
{
  continue;  
}
else
min=a[i+1];
return (a,max,i+1,min);
}
printf("min elements is= %d",min);
}
















//#include<stdio.h>
//Missing elements using recursions.
int  miss(int [],int);
void main()
{
  int i,a[5],n;
  printf("enter the elements= ");
  for(i=0;i<=3;i++)
  {
      scanf("%d",&a[i]);//1,3,4,5
  }
  miss(a,0);
}

int  miss(int a[],int i)
{
  while(i<3)
  {
  if(a[i+1]-a[i]!=1)
  {
        printf("missing elements is=%d",a[i+1]-1);
        break;
  }
  else

  return (a,i+1);

}

}










//#include<stdio.h>
int  fact(int);
void main()
{
int n;
printf("enter any number= ");
scanf("%d",&n);//n=5-->120

fact(n);
}

int fact(int n)
{
    int i=1;
    while(i<=5)
    {
  if(n==1)
  {
    return 1;  
  }
  else
  ++i;
  return printf("%d",n*fact(n-1));
    }
}







//
//how many repeated.
#include<stdio.h>
int rept(int [],int,int);
void main()
{
 int n,a[5],i;
 printf("enter the numbers= ");
 for(i=1;i<=5;i++)
 {
  scanf("%d",&a[i]);   
 }
 

  rept(a,0,1);
}

int  rept(int a[],int c,int i)
{
while(i<5)
{
 if(a[i]==a[i+1])  //1,3,3,3,4.
 {
    c=c+1; 
 }
 else
 return (a,c,i+1);
 //zuniper network..      
}
printf("number of repeated elements is= %d",c);

}
// all star pattern print using recursion




#include<stdio.h>
void pstar(int,int,int);
void main()
{
    int n;
    printf("enter the line = ");
    scanf("%d",&n);//n=5
 pstar(1,1,n);   
}

void pstar(int r,int c,int n )
{
    if(r<=c && c<=n)
    {
      printf("*");
      return pstar(r,c+1,n);
    }
    else
    printf("\n");
    
    
    
 
  
  
}







//#include<stdio.h>
int rem(int ,int,int,int);
void main(int n,int r)
{
  printf("enter the number= ");
  scanf("%d",&n);//n=12
  r=(n%10)*10+(r/10);
  rem(n,r,1,1);
  
}

int rem(int n,int r,int i,int m)
{
    
  if(i<=r)
  {
      int a;
      a=n;//a=12
      m=m*a;
      return (n,r,i+1,m);
  }
  printf("output is=%d",m);
    
    
}//INCOMPLETE.
