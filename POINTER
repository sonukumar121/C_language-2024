
// sum of two num using pointers.
#include <stdio.h>
#include<stdlib.h>
/*int main()
{
  int a=10,b=20;
  int *p1,*p2,c,d,e;
  p1=&a;
  p2=&b;
  c=*p1 + *p2;
 
  printf("%d",c);
  
  
}*/
// swap of two num using pointers.

/*int main()
{   printf("the value of a,b is before swapping (10,20)");
    int a=10,b=20,*p,*q,c;
    p=&a;
    q=&b;
    c=*p; //c=10
    p=*q; //p=20
    q=c;  //q=10
    printf("the value of a,b after swapping  is= (%d,%d)",p,q);
}*/




#include<stdio.h>
//arrange the elements using pointers.
/*int main()
{
    
  int *p,*q,x,i,c,a[20];
  printf("enter the elemnets= ");
  for(i=1;i<=5;i++)
  {
    scanf("%d",&a[i]);  
  }
  

 
 for(x=1;x<=5;x++)
 {
     for(i=x+1;i<=5;i++)
     {
         if(a[x]<a[i])
         {
             p=&a[i];
             q=&a[x];
             c=*p;
            *p=*q;
             *q=c;
         }
     }
 }
 for(i=1;i<=5;i++)
 {
     printf("%d",a[i]);
 }
 
}*/

//find the max elements in array using pointers.


/*int main()
{
  int *max,x,n,c,i,a[20];
  printf("enter the elements= ");
  for(i=1;i<=5;i++)
  {
    scanf("%d",&a[i]);    
  }
  max=&a[1];
  for(i=1;i<5;i++)
  {
      if(*max<a[i+1])
      {
          max=&a[i+1];
          c=*max;
      }
      
  }
  printf("the MaxM value in aaray is= %d",c);
    
}*/






//linear search using pointers.
//1-D pointers.
#include<stdio.h>
#include<string.h>
/*int main()
{
   int a[20],i,j,k,x,n,*p,*q;
   printf("enter the elements= ");
   for(i=1;i<=5;i++)
   {
       scanf("%d",&a[i]);//5,8,2,0,1.
   }
   printf("enter the searching elements= ");
   scanf("%d",&n);//n=2;
   q=&n;
  
       for(i=1;i<=5;i++)
       {
           p=&a[i];
         if(*p==*q)
         {
             printf("elements is found");
             break;
          
         }
       }
   
   
   if(i==6)
   {
       printf("elements is  not found");
   }
   
   
}*/

//Write a program in C to find the maximum number between two numbers using a pointer.
/*Test Data :
Input the first number : 5
Input the second number : 6
Expected Output :*/
/*int main()
{
  int *p,*q,x,y,c;
  printf("enter the two numbers= ");
  scanf("%d%d",&x,&y);
  p=&x;
  q=&y;
  if(*p>*q)
  {
      printf("x is greater");
  }
  else
  printf("y  is greater");
 
  
}*/

/*7. Write a program in C to store n elements in an array and print the elements using a pointer.
Test Data :
Input the number of elements to store in the array :5
Input 5 number of elements in the array :
element - 0 : 5
element - 1 : 7
element - 2 : 2
element - 3 : 9
element - 4 : 8
Expected Output :

 The elements you entered are :                                                                               
 element - 0 : 5                                                                                              
 element - 1 : 7                                                                                              
 element - 2 : 2                                                                                              
 element - 3 : 9                                                                                              
 element - 4 : 8   */

/*int main()
{
    int *p[5],x,n,i,a[20];
    printf("enter the elements= ");
    for(i=1;i<=5;i++)
    {
        scanf("%d",&a[i]);//1,2,3,4,5.
    }
    for(i=1;i<=5;i++)
    {
      p[i]=&a[i];  
    }
    for(i=1;i<=5;i++)
    {
        printf("%d",*p[i]);
    }
    
    
}*/
/*6. Write a program in C to compute the sum of all elements in an array using pointers.
Test Data :
Input the number of elements to store in the array (max 10) : 5
Input 5 number of elements in the array :
element - 1 : 2
element - 2 : 3
element - 3 : 4
element - 4 : 5
element - 5 : 6
Expected Output :

 The sum of array is : 20.*/
 
 
 int main()
 {
   int *p,*q,sum=0,a[20],i;
   printf("enter the numbers= ");
   for(i=1;i<=5;i++)
   {
       scanf("%d",&a[i]);//,1,4,5,6,7;
       p[i]=&a[i];
   }
   
     for(i=1;i<=5;i++)
     {
         sum=sum + *(int*)p[i];
     }
     printf("the sum of elements is= %d",sum);
 }


 [// NOT DONE]


// type casting one data type--->another datatype.
int main()
/* {
   int a=3;
   float b=54;
   printf("the value of a=%d",(int)b);
   return 0;
 }*/




/*7. Write a program in C to print the elements of an array in reverse order.
Test Data :
Input the number of elements to store in the array (max 15) : 5
Input 5 number of elements in the array :
element - 1 : 2
element - 2 : 3
element - 3 : 4
element - 4 : 5
element - 5 : 6
Expected Output :
#include<stdio.h>
int main()
{
  int a[5],*p[5],i,j,n;
  printf("enter the no.of values= ");
  scanf("%d",&n);//n=5
  printf("enter the elements= ");
  for(i=1;i<=5;i++)
  {
      scanf("%d",&a[i]);
  }
  for(i=5;i<=n;i--)
  {
      if(i==0)
      {
          break;
      }
      
    p[i]=&a[i];  
  }
   for(i=5;i<=n;i--)
 {
      if(i==0)
      {
          break;
      }
      
    printf("%d",*(int*)p[i]);
 }
    */
    // create stacks using pointer.








#include<stdio.h>
//stack using pointers.
#define max 5
#define *P[5]
int top=-1;
int item,i,c;
int stack[max];

void push(item)
 {
   if(top==max-1)
   {
     printf("stack is full");  
   }
   else
   stack[++top]=item;
 //  printf("element is inserted= %d",stack[top]);
   for(i=0;i<=top;i++)
   {
     p[i]=&stack[top];
     printf("element is inserted= %d",*(int*)p[i]);
   }
   
  
   
 }
 
 void pop()
 {
     if(top==-1)
     {
         printf("stack is empty");
     }
     else
    // c=stack[top--];
    for(i=5;i<=0;i--)
    p[i--]=&stack[top--];
     //printf("element is deleted= %d",c);
     printf("element is deleted= %d",*(int*)p);
 }
 
 void display()
 {
     for(i=1;i<=5;i++)
     {
         printf("%d",*(int*)p[i]);
     }
 }
 
 void Exit()
 {
     return 0;
 }
 
 
 

int main()
{
 printf("1> push\n 2> pop\n 3> Display\n 4>Exit\n");
 while(1)
 {
     int  choice,item;
     printf("enter your choice= ");
     scanf("%d",&choice);
     switch(choice)
     {
         case 1: printf("enter the item= ");
                 scanf("%d",&item);
                 push(item);
                 break;
                 
         case 2:pop();
         break;
     
         case 3:display();
               break;
               
        case 4:Exit();
               return 0;
        
        default: printf("invalid choice try again");       
 }
 }
}
 //INCOMPLETE.
 
 
 
 
 #include<stdio.h>
int main()
{
  int *P,*q,i,j,x,target,a[5];
  printf("enter the elements=  ");
  for(i=1;i<=5;i++)
  {
      scanf("%d",&a[i]);//5,6,7,9,10.
  }
  printf("enter your target= ");
  scanf("%d",&target);
  for(x=1;x<=5;x++)
  {
      for(i=x+1;i<5;i++)
      {
          p=&a[x];
          q=&a[i];
          if(*p + *q==target)
          {
            printf("(%d %d)",*p,*q); 
            break;
          }
      }
  }
}
 
 // //INCOMPLETE.
 
 
 
 
 

//Missing in Array[1,2,4,5];
#include<stdio.h>
void missel(int*);
void main()
{
  int a[5];
  printf("enter the numbers= ");
  for(i=1;i<=5;i++)
  {
      scanf("%d",&a[i]);
  }
  missel(a);
}
  
void missel(int *p)
{
    int i;
    for(i=1;i<=5;i++)
    {
      p[i]=&a[i];  
    }
    
  for(i=1;i<5;i++)
  {
      if(p[i]-p[i+1]!=1)
      {
        printf("missing elements is=%d",a[i]+1);  
      }
      else
      i++;
  }
}
  
  
  
  
  
  


 
 
 
 
 
 
  





























