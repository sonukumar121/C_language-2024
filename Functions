16) ACTUAL PARAMETER AND FORMAL PARAMETER.==> ACTUAL PARAMTER MEANS VALUE OF THE PARAMETER  PASSES DURING CALLING THE FUNCTIONS AND FORMAL PARAMETER MEANS WHAT TYPPE OF VARIABLE PARAMTER  DURING DECLARE OF THE FUNCTION.
     [IF I CHANGE IN THE FORMAL PARAMETR ARGUMENT  ANY THING THEN THEY WOULD NOT AFFECT ON ACTUAL ARGUMENT VICE VERSA .]

*** --> arguemnt means value and parameter means jisse value pass horhi.
 
17) [CALL BY VALUE] => 1) in this case we are passing the value of the variable.x(a) with parametr.
                     2) cant change the value of actual argument using formal argument.
                     3) no pointers are used.
                     4) its required more memory.
                     5) it is less efficient.

18) [CALL BY ADDRESS] => 1)in this case passing address of variable .x(&a).
                       2) cant change the value of actual argument using formal argument.
                       3) pointers are used.
                       4) its required more memory.
                       5) it is more effiecient.

19) [CALL BY REFERNCE] =>1) its passes the address of variable.
                         2)this actual value is modified because we change the address of the same variable.
                         3)its requires less memory.
                         4) it is more  efficient.

20)Printf it is a inbuilt library function which is declared in studio dots header file.
--1)The printer function is used to print any type of message and values on the console.
--2)We use print app function with format specifier lights % d % C  %s %f.
--3)We can also use a escapes sequence in printer function \n,\t.
--4)\t ==> space between value when you  print .

21)--1) it's kind of function it is a middle Library function which is declared in studio dot h header file
--2)Scanner function used to take input from the user
--3)In a scanner function must be used to format specifier like %d,%f,%c,%s.




























/*15) FUNCTION==>it is the block of code which takes input from the user and do some specific calculations and gives output.

    1)no argument and  no return value.
    2)no argument and  return value.
    3)argument    and  no return value.
    4)argument    and  return value. */
    
    
    
   // 1)no argument and  no return value.
    #include<stdio.h>
  /* void sum();//fn declare.
   void  main()
    {
      
       sum();//fn calling.
    }
    
    void sum()//fn define.
    {
       int a,b,c;
       printf("enter the two number= ");
       scanf("%d%d",&a,&b); 
       c=a+b;
       printf("sum is= %d",c);
    }*/
    
    
   // 2)no argument and  return value.
     /*int sum();//fn declare
     void main()
     {
         int x;
        x=sum();
        printf("sum is= %d",x);
     }
    
     int sum()//fn define.
     {
       int a,b,c;
       printf("enter the two number= ");
       scanf("%d%d",&a,&b);
       c=a+b;
       return c;
     }*/
    
    
     //3)argument    and  no return value.
      /* void sum(int ,int );//formal parameter.-->we should to specify data_type of the variable but optional is (name of the variable);
       void main()
       {
         int a,b;
         printf("enter the two number= ");
         scanf("%d%d",&a,&b);
         sum(a,b);//a,b-->actual paramter passing actual argument of the  variable a & b.
       }
       
       void sum(int m, int n)//fn define-->we should to specify data_type or name of the variable.
       {
           int c;
          c=m+n; 
          printf("sum is= %d",c);
       }
     */
    
    //4)argument    and  return value. 
    /*int sum( int m ,int n);//fn declare.
    int main()
    {
        int a,b,x;
      x=sum(a,b); //fn calling
      printf("sum is=%d",x);
    }
    
    int sum(int m, int n)
    
    {
        int a,b,c;
        printf("enter the two  number= ");
        scanf("%d%d",&a,&b);
        return a+b;
        
    }*/
    
    
    
    
    
    
    
    
    
    
    
    
    









//PASSING ARRAY THROUGH FUNCTIONS.
#include<stdio.h>
int fun(int array[])
{
    int i;
    for( i=0;i<4;i++)
    {
        printf("the value at %d is %d\n",i,array[i]);
    }
}

int main()
{
   int arr[]={10,20,30,40};
   fun(arr);

}








//array pasing through funtions.
#include<stdio.h>
int fun(int array[])
{
    int i;
    for( i=0;i<4;i++)
    {
        printf("the value at %d is %d\n",i,array[i]);
    }
}

int main()
{
   int arr[5],i;
   printf("enter the numbers= ");
   for(i=0;i<4;i++)
   {
      scanf("%d",&arr[i]); 
     
   }
    fun(arr);
  
   

}















//7:35--> TIME
//array pasing through funtions.
#include<stdio.h>
/*int fun(int array[])
{
    int i;
    for( i=0;i<=4;i++)
    {
        printf("the value at %d is %d\n",i,array[i]);
    }
}

int main()
{
   int arr[5],i;
   printf("enter the numbers= ");
   for(i=0;i<=4;i++)
   {
      scanf("%d",&arr[i]); 
     
   }
    fun(arr);
  
   

}*/


//square of any number using functions.
/*void square(int m)
{
    int c;
  c=m*m;
  printf("the sqare os this number is= %d",c);
}

int main()
{
  int r;
  printf("enter any number= ");
  scanf("%d",&r);
  square(r);
}*/



 //Write a program in C to get the largest element of an array using the function.
int larg(int array[])
 {
   int i,j,k,a[30],c,max=a[1];
   
   for(i=1;i<=5;i++)
   {
      
         if(a[i]>max)
         {
           max=a[i];
           
          
         }
        
   }
   printf("largest element is= %d",max);
 }

int main()
{
    int a[5],i;
    printf("enter the numbers= ");
    for(i=1;i<=5;i++)
    {
        scanf("%d",&a[i]);
    }
    larg(a);
}  //INCOMPLETE








//FUNCTIONS POINTERS.
#include<stdio.h>
void sum(int a, int b)
{
    printf("%d",a+b);
}


void sub(int a, int b)
{
   printf("%d",a-b); 
}


void display(void(*fptr)(int , int)
{
  (*fptr)(5,1);  
}


void main()
{
    display(sum);-->display fn which holds the adress of the another function which is sum
    display(sub);
}






#include<stdio.h>

/*void sum(int *p,int *q);//fn declare.
void main()
{
  int a,b;
  printf("enter the two numbers= ");
  scanf("%d %d",&a,&b);
  sum(&a,&b);
  
}

void sum(int *p ,int *q)//fn define.
{
    int c;
    c=*p + *q;
    printf("sum is= %d",c);
}


#include<stdio.h>
/*12:30 start..code.
//fn pointers.
void sum(int *p ,int *q);//fn declare.

void main()
{
    int a,b,*p,*q;
    printf("enter the two numbers= ");
    scanf("%d%d",&a,&b);
    p=&a;
    q=&b;
    sum(p,q);//(100,200).
}


void sum(int *p,int *q)//(100,200)//fn define.
{
  int c;
  c=*p + *q;
  printf("sum is= %d",c);
}*/

//call by value.





/*void sum(int,int);//fn declare.
void main()
{
  int a,b;
  printf("enter the two numbers= ");
  scanf("%d%d",&a,&b);
  sum(a,b);//fn calling.
}

void sum(int x,int y)//fn define.
{
  int c;
  c=x+y;
  printf("sum is=%d",c);
}*/



  //swap of two numbers.
  /*void swap(int,int);
  void main()
  {
   int a,b;
   printf("enter the numbers= ");
   scanf("%d%d",&a,&b);
   swap(a,b);
  }

  void swap(int x,int y)
  {
     int z;
     z=y;
     y=x;
     x=z;
     printf("after swapping =%d,%d",x,y);
  }*/
  
   
 /* void sum(int []);//fn declare.
 
  void main()
  {
    int a[5],i,x;
    printf("enter the numbers= ");
    for(i=1;i<=5;i++)
    {
      scanf("%d",&a[i]);  
    }
    sum(a);
      
  }
  
  void sum(int a[])
  {
    int i,sum=0;
    for(i=1;i<=5;i++)
    {
      sum=sum+a[i];   
    }
    printf("sum is= %d",sum);
  }*/





//passing pointer through fn.
 /*void sum(int *);//fn declare.
 
  int main()
  {
    int a[5],i,x;
    printf("enter the numbers= ");
    for(i=0;i<=4;i++)
    {
      scanf("%d",&a[i]);  
    }
    sum(a);
    return 0;
      
  }
  
  void sum(int *p)//*p=&a[i];
  {
    int i,sum=0;
    for(i=0;i<=4;i++)
    {
    printf("%d",*p);
    sum=sum+*p;
    p++;
     
    }
    printf("sum is= %d",sum);
    
  }*/
  
  // sorting the elements;
   void sort(int *);
   void main()
   {
      int a[5],i;
      printf("enter the numbers= ");
      for(i=1;i<=5;i++)
      {
          scanf("%d",&a[i]);
      }
      sort(a);
      
   }
   
   void sort(int *p)
   {
       int i;
      for(i=1;i<=5;i++)
      {
          
          
         
          if(*p > *(++p))
          {
            c=*
      }
         for(i=1;i<=5;i++)
         {
             printf("%d",*p);
             p++;
         }
      }
   }
   
  
  
  
  
  
  //  RECURSION...
#include<stdio.h>
/*
//recursion in c.
int fact(int x );
void  main()
{
   int n,f;
   printf("enter the number= ");
   scanf("%d",&n);
    f=fact(n); //n=5
    printf("%d",f);
  
}

int fact(int x)

{
   
    if(x==1)
    {
        return 1;
    }
    else
    return x*fact(x-1);
    
}
*/
// print(1 to n)
/*void natural(int x);
void  main()
{
    int n=1;
  
  natural(n);
}


void natural(int x)
{
    if(x<10)
    {
        printf(" %d,",x);
        return natural(x+1);
    }
    
}*/




























  
  
  
  
  
  


 


































